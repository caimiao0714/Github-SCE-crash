r2 <- rle(r2)
r2
r2$values[r2$values] = cumsum(r2$values[r2$values])
r2
segment_0 = function(speed, threshold, time_diff) {
## Replace very long single points
speed[time_diff >= threshold] <- 0
## First, replacing stretches of less than "threshold" consecutive 0 speeds by 1s
r1 = rle(speed != 0)
r1$values <- replicate(length(r1$values), 1)
r1$values <- cumsum(r1$values)
order_tmp <- inverse.rle(r1)
dat_tmp1 <- data.table::data.table(speed, order_tmp, time_diff)
dat_tmp2 <- dat_tmp1[,.(sumdiff = sum(time_diff)), by = order_tmp]
r2 = rle(speed != 0)
first_rle = r2$values[1]
r2$values[r2$values == 0 & dat_tmp2$sumdiff < threshold] <- TRUE
r2$values[1] = first_rle
r2 <- inverse.rle(r2)
r2 <- rle(r2)
## Then numbering consecutive stretches of non-zero values
r2$values[r2$values] = cumsum(r2$values[r2$values])
return(inverse.rle(r2))
}
d_trip = d %>%
.[,diff := as.integer(difftime(ping_time, shift(ping_time, type = "lag", fill = 0),
units = "mins")), driver] %>%
.[,diff := {diff[1] = 0L; diff}, driver] %>%
.[,trip_id := segment_0(speed = speed, threshold = 30, time_diff = diff), driver]
d
d
d = fread("data/sample_ping.csv") %>%
.[,ping_time := ymd_hms(ping_time)]
d
d
d_trip = d %>%
.[,diff := as.integer(difftime(ping_time, shift(ping_time, type = "lag", fill = 0),
units = "mins")), driver] %>%
.[,diff := {diff[1] = 0L; diff}, driver] %>%
.[,trip_id := segment_0(speed = speed, threshold = 30, time_diff = diff), driver]
d = fread("data/sample_ping.csv") %>%
.[,ping_time := ymd_hms(ping_time)] %>%
.[-(266:273),]
d_trip = d %>%
.[,diff := as.integer(difftime(ping_time, shift(ping_time, type = "lag", fill = 0),
units = "mins")), driver] %>%
.[,diff := {diff[1] = 0L; diff}, driver] %>%
.[,trip_id := segment_0(speed = speed, threshold = 30, time_diff = diff), driver]
speed[time_diff >= threshold] <- 0
## First, replacing stretches of less than "threshold" consecutive 0 speeds by 1s
r1 = rle(speed != 0)
r1$values <- replicate(length(r1$values), 1)
r1$values <- cumsum(r1$values)
order_tmp <- inverse.rle(r1)
dat_tmp1 <- data.table::data.table(speed, order_tmp, time_diff)
dat_tmp2 <- dat_tmp1[,.(sumdiff = sum(time_diff)), by = order_tmp]
r2 = rle(speed != 0)
first_rle = r2$values[1]
r2$values[r2$values == 0 & dat_tmp2$sumdiff < threshold] <- TRUE
r2$values[1] = first_rle
r2
r2 <- inverse.rle(r2)
r2 <- rle(r2)
r2
speed[time_diff >= threshold] <- 0
## First, replacing stretches of less than "threshold" consecutive 0 speeds by 1s
r1 = rle(speed != 0)
r1$values <- replicate(length(r1$values), 1)
r1$values <- cumsum(r1$values)
order_tmp <- inverse.rle(r1)
dat_tmp1 <- data.table::data.table(speed, order_tmp, time_diff)
dat_tmp2 <- dat_tmp1[,.(sumdiff = sum(time_diff)), by = order_tmp]
r2 = rle(speed != 0)
first_rle = r2$values[1]
r2$values[r2$values == 0 & dat_tmp2$sumdiff < threshold] <- TRUE
r2$values[1] = first_rle
r3 <- inverse.rle(r2)
r3 <- rle(r3)
identical(r2, r3)
r2
r3
segment_0 = function(speed, threshold, time_diff) {
## Replace very long single points
speed[time_diff >= threshold] <- 0
## First, replacing stretches of less than "threshold" consecutive 0 speeds by 1s
r1 = rle(speed != 0)
r1$values <- replicate(length(r1$values), 1)
r1$values <- cumsum(r1$values)
order_tmp <- inverse.rle(r1)
dat_tmp1 <- data.table::data.table(speed, order_tmp, time_diff)
dat_tmp2 <- dat_tmp1[,.(sumdiff = sum(time_diff)), by = order_tmp]
r2 = rle(speed != 0)
first_rle = r2$values[1]
r2$values[r2$values == 0 & dat_tmp2$sumdiff < threshold] <- TRUE
r2$values[1] = first_rle
r2 <- rle(inverse.rle(r2))
## Then numbering consecutive stretches of non-zero values
r2$values[r2$values] = cumsum(r2$values[r2$values])
return(inverse.rle(r2))
}
d_trip = d %>%
.[,diff := as.integer(difftime(ping_time, shift(ping_time, type = "lag", fill = 0),
units = "mins")), driver] %>%
.[,diff := {diff[1] = 0L; diff}, driver] %>%
.[,trip_id := segment_0(speed = speed, threshold = 30, time_diff = diff), driver]
1:5
z = 1:5
shift(z, 1, NA, "lead")
segment_0 = function(speed, threshold, time_diff) {
## Replace very long single points
speed[time_diff >= threshold] <- 0
## First, replacing stretches of less than "threshold" consecutive 0 speeds by 1s
r1 = rle(speed != 0)
r1$values <- replicate(length(r1$values), 1)
r1$values <- cumsum(r1$values)
order_tmp <- inverse.rle(r1)
dat_tmp1 <- data.table::data.table(speed, order_tmp, time_diff)
dat_tmp2 <- dat_tmp1[,.(sumdiff = sum(time_diff)), by = order_tmp]
r2 = rle(speed != 0)
first_rle = r2$values[1]
r2$values[r2$values == 0 & dat_tmp2$sumdiff < threshold] <- TRUE
r2$values[1] = first_rle
r2 <- rle(inverse.rle(r2))
r2$values[r2$values] = cumsum(r2$values[r2$values])
id = inverse.rle(r2)
jump_speed = id == 0 & speed != 0
id[jump_speed] = id[data.table::shift(jump_speed, 1, NA, "lead")]
return(id)
}
d_trip = d %>%
.[,diff := as.integer(difftime(ping_time, shift(ping_time, type = "lag", fill = 0),
units = "mins")), driver] %>%
.[,diff := {diff[1] = 0L; diff}, driver] %>%
.[,trip_id := segment_0(speed = speed, threshold = 30, time_diff = diff), driver]
d = fread("data/sample_ping.csv") %>%
.[,ping_time := ymd_hms(ping_time)] %>%
.[-(266:273),]
d_trip = d %>%
.[,diff := as.integer(difftime(ping_time, shift(ping_time, type = "lag", fill = 0),
units = "mins")), driver] %>%
.[,diff := {diff[1] = 0L; diff}, driver] %>%
.[,trip_id := segment_0(speed = speed, threshold = 30, time_diff = diff), driver]
which(id == 0 & speed != 0)
speed[time_diff >= threshold] <- 0
## First, replacing stretches of less than "threshold" consecutive 0 speeds by 1s
r1 = rle(speed != 0)
r1$values <- replicate(length(r1$values), 1)
r1$values <- cumsum(r1$values)
order_tmp <- inverse.rle(r1)
dat_tmp1 <- data.table::data.table(speed, order_tmp, time_diff)
dat_tmp2 <- dat_tmp1[,.(sumdiff = sum(time_diff)), by = order_tmp]
r2 = rle(speed != 0)
first_rle = r2$values[1]
r2$values[r2$values == 0 & dat_tmp2$sumdiff < threshold] <- TRUE
r2$values[1] = first_rle
r2 <- rle(inverse.rle(r2))
r2$values[r2$values] = cumsum(r2$values[r2$values])
id = inverse.rle(r2)
id
jump_speed = which(id == 0 & speed != 0)
jump_speed
id[jump_speed] = id[data.table::shift(jump_speed, 1, NA, "lead")]
id
segment_0 = function(speed, threshold, time_diff) {
## Replace very long single points
speed[time_diff >= threshold] <- 0
## First, replacing stretches of less than "threshold" consecutive 0 speeds by 1s
r1 = rle(speed != 0)
r1$values <- replicate(length(r1$values), 1)
r1$values <- cumsum(r1$values)
order_tmp <- inverse.rle(r1)
dat_tmp1 <- data.table::data.table(speed, order_tmp, time_diff)
dat_tmp2 <- dat_tmp1[,.(sumdiff = sum(time_diff)), by = order_tmp]
r2 = rle(speed != 0)
first_rle = r2$values[1]
r2$values[r2$values == 0 & dat_tmp2$sumdiff < threshold] <- TRUE
r2$values[1] = first_rle
r2 <- rle(inverse.rle(r2))
r2$values[r2$values] = cumsum(r2$values[r2$values])
id = inverse.rle(r2)
jump_speed = which(id == 0 & speed != 0)
id[jump_speed] = id[data.table::shift(jump_speed, 1, NA, "lead")]
return(id)
}
d_trip = d %>%
.[,diff := as.integer(difftime(ping_time, shift(ping_time, type = "lag", fill = 0),
units = "mins")), driver] %>%
.[,diff := {diff[1] = 0L; diff}, driver] %>%
.[,trip_id := segment_0(speed = speed, threshold = 30, time_diff = diff), driver]
d = fread("data/sample_ping.csv") %>%
.[,ping_time := ymd_hms(ping_time)] %>%
.[-(266:273),]
d_trip = d %>%
.[,diff := as.integer(difftime(ping_time, shift(ping_time, type = "lag", fill = 0),
units = "mins")), driver] %>%
.[,diff := {diff[1] = 0L; diff}, driver] %>%
.[,trip_id := segment_0(speed = speed, threshold = 30, time_diff = diff), driver]
View(d_trip)
d_trip = d %>%
.[,diff := as.integer(difftime(ping_time, shift(ping_time, type = "lag", fill = 0),
units = "mins")), driver] %>%
.[,diff := {diff[1] = 0L; diff}, driver]
speed = d_trip[,speed]
time_diff = d_trip[,diff]
speed[time_diff >= threshold] <- 0
## First, replacing stretches of less than "threshold" consecutive 0 speeds by 1s
r1 = rle(speed != 0)
r1$values <- replicate(length(r1$values), 1)
r1$values <- cumsum(r1$values)
order_tmp <- inverse.rle(r1)
dat_tmp1 <- data.table::data.table(speed, order_tmp, time_diff)
dat_tmp2 <- dat_tmp1[,.(sumdiff = sum(time_diff)), by = order_tmp]
r2 = rle(speed != 0)
first_rle = r2$values[1]
r2$values[r2$values == 0 & dat_tmp2$sumdiff < threshold] <- TRUE
r2$values[1] = first_rle
r2 <- rle(inverse.rle(r2))
r2$values[r2$values] = cumsum(r2$values[r2$values])
id = inverse.rle(r2)
jump_speed = which(id == 0 & speed != 0)
jump_speed
speed[time_diff >= threshold] <- 0
## First, replacing stretches of less than "threshold" consecutive 0 speeds by 1s
r1 = rle(speed != 0)
r1$values <- replicate(length(r1$values), 1)
r1$values <- cumsum(r1$values)
order_tmp <- inverse.rle(r1)
dat_tmp1 <- data.table::data.table(speed, order_tmp, time_diff)
dat_tmp2 <- dat_tmp1[,.(sumdiff = sum(time_diff)), by = order_tmp]
r2 = rle(speed != 0)
first_rle = r2$values[1]
r2$values[r2$values == 0 & dat_tmp2$sumdiff < threshold] <- TRUE
r2$values[1] = first_rle
r2 <- rle(inverse.rle(r2))
r2$values[r2$values] = cumsum(r2$values[r2$values])
id = inverse.rle(r2)
id
id == 0
speed != 0
z = data.frame(id, speed, id0 = (id == 0), speed0 = (speed != 0))
View(z)
segment_0 = function(speed, threshold, time_diff) {
## Replace very long single points
speed1 = speed
speed[time_diff >= threshold] <- 0
## First, replacing stretches of less than "threshold" consecutive 0 speeds by 1s
r1 = rle(speed != 0)
r1$values <- replicate(length(r1$values), 1)
r1$values <- cumsum(r1$values)
order_tmp <- inverse.rle(r1)
dat_tmp1 <- data.table::data.table(speed, order_tmp, time_diff)
dat_tmp2 <- dat_tmp1[,.(sumdiff = sum(time_diff)), by = order_tmp]
r2 = rle(speed != 0)
first_rle = r2$values[1]
r2$values[r2$values == 0 & dat_tmp2$sumdiff < threshold] <- TRUE
r2$values[1] = first_rle
r2 <- rle(inverse.rle(r2))
r2$values[r2$values] = cumsum(r2$values[r2$values])
id = inverse.rle(r2)
jump_speed = which(id == 0 & speed1 != 0)
id[jump_speed] = id[data.table::shift(jump_speed, 1, NA, "lead")]
return(id)
}
d_trip = d %>%
.[,diff := as.integer(difftime(ping_time, shift(ping_time, type = "lag", fill = 0),
units = "mins")), driver] %>%
.[,diff := {diff[1] = 0L; diff}, driver] %>%
.[,trip_id := segment_0(speed = speed, threshold = 30, time_diff = diff), driver]
d = fread("data/sample_ping.csv") %>%
.[,ping_time := ymd_hms(ping_time)] %>%
.[-(266:273),]
d_trip = d %>%
.[,diff := as.integer(difftime(ping_time, shift(ping_time, type = "lag", fill = 0),
units = "mins")), driver] %>%
.[,diff := {diff[1] = 0L; diff}, driver]
speed = d_trip[,speed]
time_diff = d_trip[,diff]
speed1 = speed
speed[time_diff >= threshold] <- 0
## First, replacing stretches of less than "threshold" consecutive 0 speeds by 1s
r1 = rle(speed != 0)
r1$values <- replicate(length(r1$values), 1)
r1$values <- cumsum(r1$values)
order_tmp <- inverse.rle(r1)
dat_tmp1 <- data.table::data.table(speed, order_tmp, time_diff)
dat_tmp2 <- dat_tmp1[,.(sumdiff = sum(time_diff)), by = order_tmp]
r2 = rle(speed != 0)
first_rle = r2$values[1]
r2$values[r2$values == 0 & dat_tmp2$sumdiff < threshold] <- TRUE
r2$values[1] = first_rle
r2 <- rle(inverse.rle(r2))
r2$values[r2$values] = cumsum(r2$values[r2$values])
id = inverse.rle(r2)
jump_speed = which(id == 0 & speed1 != 0)
jump_speed
data.table::shift(jump_speed, 1, NA, "lead")
segment_0 = function(speed, threshold, time_diff) {
## Replace very long single points
speed1 = speed
speed[time_diff >= threshold] <- 0
## First, replacing stretches of less than "threshold" consecutive 0 speeds by 1s
r1 = rle(speed != 0)
r1$values <- replicate(length(r1$values), 1)
r1$values <- cumsum(r1$values)
order_tmp <- inverse.rle(r1)
dat_tmp1 <- data.table::data.table(speed, order_tmp, time_diff)
dat_tmp2 <- dat_tmp1[,.(sumdiff = sum(time_diff)), by = order_tmp]
r2 = rle(speed != 0)
first_rle = r2$values[1]
r2$values[r2$values == 0 & dat_tmp2$sumdiff < threshold] <- TRUE
r2$values[1] = first_rle
r2 <- rle(inverse.rle(r2))
r2$values[r2$values] = cumsum(r2$values[r2$values])
id = inverse.rle(r2)
jump_speed = which(id == 0 & speed1 != 0)
id[jump_speed] = id[jump_speed + 1]
return(id)
}
d_trip = d %>%
.[,diff := as.integer(difftime(ping_time, shift(ping_time, type = "lag", fill = 0),
units = "mins")), driver] %>%
.[,diff := {diff[1] = 0L; diff}, driver] %>%
.[,trip_id := segment_0(speed = speed, threshold = 30, time_diff = diff), driver]
pacman::p_load(data.table, dplyr, ggplot2, lubridate)
d = fread("data/sample_ping.csv") %>%
.[,ping_time := ymd_hms(ping_time)]
knitr::kable(d[1:5,], align = "c",
caption = "Sample ping data")
segment_0 = function(speed, threshold, time_diff) {
## Replace very long single points
speed1 = speed
speed[time_diff >= threshold] <- 0
## First, replacing stretches of less than "threshold" consecutive 0 speeds by 1s
r1 = rle(speed != 0)
r1$values <- replicate(length(r1$values), 1)
r1$values <- cumsum(r1$values)
order_tmp <- inverse.rle(r1)
dat_tmp1 <- data.table::data.table(speed, order_tmp, time_diff)
dat_tmp2 <- dat_tmp1[,.(sumdiff = sum(time_diff)), by = order_tmp]
r2 = rle(speed != 0)
first_rle = r2$values[1]
r2$values[r2$values == 0 & dat_tmp2$sumdiff < threshold] <- TRUE
r2$values[1] = first_rle
r2 <- rle(inverse.rle(r2))
r2$values[r2$values] = cumsum(r2$values[r2$values])
id = inverse.rle(r2)
jump_speed = which(id == 0 & speed1 != 0)
id[jump_speed] = id[jump_speed + 1]
return(id)
}
d = d %>%
.[,diff := as.integer(difftime(ping_time, shift(ping_time, type = "lag", fill = 0),
units = "mins")), driver] %>%
.[,diff := {diff[1] = 0L; diff}, driver] %>%
.[,trip_id := segment_0(speed = speed, threshold = 30, time_diff = diff), driver]
d_trip = d %>%
.[trip_id != 0,] %>%
.[,.(start_time = ping_time[1], end_time = ping_time[.N]), .(driver, trip_id)] %>%
.[,trip_length := round(as.numeric(difftime(end_time, start_time, units = "mins")), 2)] %>%
.[,trip_median := start_time + 60*trip_length/2]
d
rep("Trip", 3)
Sys.getlocale("LC_ALL")
rmarkdown::pandoc_version()
? fig.retina
list.files("data/")
stat = fread("data/Bayesian_NB_data.csv")
pacman::p_load(data.table, dplyr, ggplot2, lubridate)
stat = fread("data/Bayesian_NB_data.csv")
stat
pacman::p_load(rstanarm)
stat = fread("data/Bayesian_NB_data.csv")
knitr::kable(stat, align = "c", caption = "A demonstration for aggregated commercial truck driver data")
pacman::p_load(rstanarm)
stat = fread("data/Bayesian_NB_data.csv")
knitr::kable(stat[1:5,], align = "c", caption = "A demonstration for aggregated commercial truck driver data")
stat = stat %>%
.[,`:=`(sce_CM = sce_CM*10000/distance,
sce_HB = sce_HB*10000/distance,
sce_HW = sce_HW*10000/distance,
sce_RS = sce_RS*10000/distance,
sce_N = sce_N*10000/distance)]
fit <- stan_glm(n_crash ~ sce_N + age + ping_speed + gender + bus_unit + d_type,
offset = log(distance/1000),
data = stat[1:1000,], family = neg_binomial_2,
prior = normal(0,10),
prior_intercept = normal(0,10), QR = TRUE,
iter = 1000, chains = 1, cores = 1, seed = 123)
stat = readr::read_csv("data/Bayesian_NB_data.csv")
pacman::p_load(rstanarm)
stat = fread("data/Bayesian_NB_data.csv")
knitr::kable(stat[1:5,], align = "c", caption = "A demonstration for aggregated commercial truck driver data")
stat = stat %>%
mutate(sce_CM = sce_CM*10000/distance,
sce_HB = sce_HB*10000/distance,
sce_HW = sce_HW*10000/distance,
sce_RS = sce_RS*10000/distance,
sce_N = sce_N*10000/distance)
fit <- stan_glm(n_crash ~ sce_N + age + ping_speed + gender + bus_unit + d_type,
offset = log(distance/1000),
data = stat[1:1000,], family = neg_binomial_2,
prior = normal(0,10),
prior_intercept = normal(0,10), QR = TRUE,
iter = 1000, chains = 1, cores = 1, seed = 123)
?broom::tidy
?pp_check
fit
pp_check(fit, plotfun = "stat", stat = "prop_zero")
prop_zero <- function(y) mean(y == 0)
pp_check(fit, plotfun = "stat", stat = "prop_zero")
fit_loo = loo(fit)
fit_loo
pacman::p_load(data.table, dplyr)
d = fread("data/Bayesian_NB_data.csv")
d
pacman::p_load(data.table, dplyr)
# sample_ping.csv
d1 = fread("private/plot_ping_trip_agg.csv") %>%
.[, `:=`(driver = "sample_driver",
trip_id = NULL,
lat = round(lat, 2),
long = round(long, 2))]
fwrite(d1, "data/sample_ping.csv")
# Bayesian_NB_data.csv
d2 = fread("private/truck_crash_SCE.csv") %>%
.[,`:=`(EMPLID = NULL, non_dot_injuries = NULL,
bus_unit = case_when(bus_unit == "DCS00" ~ "Dedicated",
bus_unit == "JBI00" ~ "Intermodal",
bus_unit == "VAN00" ~ "Final-mile"),
driver = paste0("d", stringr::str_pad(as.integer(as.factor(driver)),
5, "left", "0")))]
fwrite(d2, "data/Bayesian_NB_data.csv")
d2 = fread("private/truck_crash_SCE.csv") %>%
.[,`:=`(EMPLID = NULL, non_dot_injuries = NULL,
bus_unit = case_when(bus_unit == "DCS00" ~ "Dedicated",
bus_unit == "JBI00" ~ "Intermodal",
bus_unit == "VAN00" ~ "Final-mile"),
driver = paste0("d", stringr::str_pad(as.integer(as.factor(driver)),
5, "left", "0")))]
fwrite(d2, "data/Bayesian_NB_data.csv")
pacman::p_load(data.table, dplyr)
# Bayesian_NB_data.csv
d2 = fread("private/truck_crash_SCE.csv") %>%
.[,`:=`(EMPLID = NULL, non_dot_injuries = NULL,
bus_unit = case_when(bus_unit == "DCS00" ~ "Dedicated",
bus_unit == "JBI00" ~ "Intermodal",
bus_unit == "VAN00" ~ "Final-mile"),
driver = paste0("d", stringr::str_pad(as.integer(as.factor(driver)),
5, "left", "0")))]
d2
d2
# Bayesian_NB_data.csv
d2 = fread("private/truck_crash_SCE.csv") %>%
.[,`:=`(EMPLID = NULL, non_dot_injuries = NULL,
bus_unit = case_when(bus_unit == "DCS00" ~ "Dedicated",
bus_unit == "JBI00" ~ "Intermodal",
bus_unit == "VAN00" ~ "Final-mile"),
d_type = case_when(d_type == "LOC" ~ "Local",
d_type == "REG" ~ "Regional",
d_type == "OTR" ~ "Over-the-road"),
driver = paste0("d", stringr::str_pad(as.integer(as.factor(driver)),
5, "left", "0")))]
fwrite(d2, "data/Bayesian_NB_data.csv")
d2
d2
d2 = fread("private/truck_crash_SCE.csv") %>%
.[,`:=`(EMPLID = NULL, non_dot_injuries = NULL,
bus_unit = case_when(bus_unit == "DCS00" ~ "Dedicated",
bus_unit == "JBI00" ~ "Intermodal",
bus_unit == "VAN00" ~ "Final-mile"),
d_type = case_when(d_type == "LOC" ~ "Local",
d_type == "REG" ~ "Regional",
d_type == "OTR" ~ "Over-the-road"),
driver = paste0("d", stringr::str_pad(as.integer(as.factor(driver)),
5, "left", "0")))]
fwrite(d2, "data/Bayesian_NB_data.csv")
# Bayesian_NB_data.csv
d2 = fread("private/truck_crash_SCE.csv") %>%
.[,`:=`(EMPLID = NULL, non_dot_injuries = NULL,
bus_unit = case_when(bus_unit == "DCS00" ~ "Dedicated",
bus_unit == "JBI00" ~ "Intermodal",
bus_unit == "VAN00" ~ "Final-mile"),
d_type = case_when(d_type == "LOC" ~ "Local",
d_type == "REG" ~ "Regional",
d_type == "OTR" ~ "Over-the-road"),
driver = paste0("d", stringr::str_pad(as.integer(as.factor(driver)),
5, "left", "0")))]
fwrite(d2, "data/Bayesian_NB_data.csv")
# Bayesian_NB_data.csv
d2 = fread("private/truck_crash_SCE.csv") %>%
.[,`:=`(EMPLID = NULL, non_dot_injuries = NULL,
bus_unit = case_when(bus_unit == "DCS00" ~ "Dedicated",
bus_unit == "JBI00" ~ "Intermodal",
bus_unit == "VAN00" ~ "Final-mile"),
d_type = case_when(d_type == "LOC" ~ "Local",
d_type == "REG" ~ "Regional",
d_type == "OTR" ~ "Over-the-road"),
driver = paste0("d", stringr::str_pad(as.integer(as.factor(driver)),
5, "left", "0")))]
fwrite(d2, "data/Bayesian_NB_data.csv")
pacman::p_load(data.table, dplyr)
d2 = fread("private/truck_crash_SCE.csv") %>%
.[,`:=`(EMPLID = NULL, non_dot_injuries = NULL,
bus_unit = case_when(bus_unit == "DCS00" ~ "Dedicated",
bus_unit == "JBI00" ~ "Intermodal",
bus_unit == "VAN00" ~ "Final-mile"),
d_type = case_when(d_type == "LOC" ~ "Local",
d_type == "REG" ~ "Regional",
d_type == "OTR" ~ "Over-the-road"),
driver = paste0("d", stringr::str_pad(as.integer(as.factor(driver)),
5, "left", "0")))]
fwrite(d2, "data/Bayesian_NB_data.csv")
